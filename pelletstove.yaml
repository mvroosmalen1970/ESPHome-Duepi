esphome:
  name: pelletkachel
  friendly_name: Pellet Kachel
  on_boot:
    - priority: -10
      then: 
        - lambda: |- 
            id(uart_send) = 0;
            id(room_temp_stove).publish_state(17.0);
            id(power_level).publish_state(1);
            id(pellet_speed).publish_state(1);
            id(fan_mode) = 1;
            id(flu_gas_temp).publish_state(17.0);
            id(exh_fan_speed).publish_state(0);
            id(burner_status).publish_state("All OK, startup");
            id(Stove).target_temperature = 21.0;

esp8266:
  board: d1

# Enable logging
logger:
  level: VERBOSE #makes uart stream available in esphome logstream
  baud_rate: 0 #disable logging over uart
  
script:
  - id: UART_CMD
    parameters:
      command_in: string
    then:
      - uart.write: 
            id: uart_bus
            data: !lambda |-
              std::string str;
              unsigned int checksum = 0;
              command_in = "R"+command_in+"0";
              for (size_t i = 0; i < command_in.size(); i++) {
                checksum += static_cast<unsigned char>(command_in[i]);
              }
              checksum = checksum & 0xFF;
              str=str_sprintf("%X", checksum); 
              str="\x1b" + command_in + str + "&";
              id(debug).publish_state("Custom command: "+str+" send."); 
              std::vector<uint8_t> vec(str.begin(), str.end());
              return vec;
              
# Enable Home Assistant API
api:
  encryption:
    key: !secret encryption_key
  services:
    - service: write
      variables:
        command: string
      then:
        - wait_until:
            condition:
              lambda: 'return (id(uart_send) == 0);'
            timeout: 1s
        - lambda: id(uart_send) = 10;
        - script.execute:         
            id: UART_CMD
            command_in: !lambda return command;        
        - script.wait: UART_CMD
        - wait_until:
            condition:
              lambda: 'return (id(uart_send) == 0);'
            timeout: 100ms  

ota:
  - platform: esphome
    password: "CreateYourOwn"

wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password
    - ssid: !secret wifi_ssid1
      password: !secret wifi_password1
    
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Pelletkachel Fallback Hotspot"
    password: "Pelletkachel"

captive_portal:

globals:
   - id: uart_send
     type: int
     restore_value: no
     initial_value: '0'
   - id: fan_mode
     type: int
     restore_value: no
     initial_value: '1'
   - id: firmware
     type: std::string
     restore_value: no
     initial_value: '"0000"'

sensor:
  - platform: template
    name: "error code"
    id: error_code
    accuracy_decimals: 0
    filters:
      - round: 0
  - platform: template
    name: "exhaust fan speed"
    id: exh_fan_speed
    device_class: "speed"
    unit_of_measurement: "RPM"
    accuracy_decimals: 0
    filters:
      - round: 0
  - platform: template
    name: "flu gas temperature"
    id: flu_gas_temp
    unit_of_measurement: "°C"
    device_class: "temperature"
    accuracy_decimals: 0
    filters:
      - round: 0
  - platform: template
    name: "pellet speed"
    id: pellet_speed
    accuracy_decimals: 0
    device_class: "speed"
    filters:
      - round: 0
  - platform: template
    name: "power level"
    id: power_level
    accuracy_decimals: 0
    filters:
      - round: 0
  - platform: template
    name: "Room Temperature"
    id: room_temp_stove
    unit_of_measurement: "°C"
    device_class: "temperature"
    accuracy_decimals: 2
    filters:
      - sliding_window_moving_average:
          window_size: 60
          send_every: 15
          send_first_at: 1  
      - round: 2
  - platform: template
    name: "PCB temperature"
    id: PCB_temp
    unit_of_measurement: "°C"
    device_class: "temperature"
    accuracy_decimals: 0
    filters:
      - round: 0
      
switch:
  - platform: template
    name: "Reset"
    id: reset_sw
    icon: "mdi:restart"
    turn_on_action: #REMOTE_RESET
      - wait_until:
          condition:
            lambda: 'return (id(uart_send) == 0);'
          timeout: 1s 
      - lambda: id(uart_send) = 9;
      - uart.write: "\x1bRD60005C&"
      - wait_until:
          condition:
            lambda: 'return (id(uart_send) == 0);'
          timeout: 100ms
      - lambda: id(debug).publish_state("Reset pellet stove s6ful");
      - switch.turn_off: reset_sw

climate:
  - platform: thermostat
    name: "Pellet kachel"
    id: Stove
    sensor: room_temp_stove
    min_idle_time: 1s
    min_heating_off_time: 1s
    min_heating_run_time: 300s
    min_fan_mode_switching_time: 1s
    heat_action: 
        - lambda: id(debug).publish_state("Thermostat heat action");
    idle_action:
        - lambda: id(debug).publish_state("Thermostat idle action");
    target_temperature_change_action: 
        - wait_until:
            condition:
              lambda: 'return (id(uart_send) == 0);'
            timeout: 1s
        - script.execute:         
            id: UART_CMD
            command_in: !lambda |-
              std::string str;
              int temp;
              temp=id(Stove).target_temperature;
              if (temp<10 || temp>35) {
                id(debug).publish_state("Temperature out of range (10-35). Set  to 21");
                temp=21;
              } 
              str=str_sprintf("%X", temp);
              if (str.length()==1) {
                str="F20" + str;
              } else{
                str="F2" + str;
              }
              id(uart_send) = 9; 
              return str;
        - script.wait: UART_CMD 
        - wait_until:
            condition:
              lambda: 'return (id(uart_send) == 0);'
            timeout: 100ms
        - if: 
            condition:
              lambda: 'return (id(debug).state != "OK");'
            then:
              - lambda: id(debug).publish_state("Stove temp change failed");
    fan_mode_quiet_action:    
      then:
        - lambda: id(fan_mode) = 1;
    fan_mode_low_action:
      then:
        - lambda: id(fan_mode) = 2;
    fan_mode_middle_action:
      then:
        - lambda: id(fan_mode) = 3;
    fan_mode_medium_action:
      then:
        - lambda: id(fan_mode) = 4;
    fan_mode_high_action:
      then:
        - lambda: id(fan_mode) = 5;
    heat_mode: 
      then:
        - wait_until:
            condition:
              lambda: 'return (id(uart_send) == 0);'
            timeout: 1s
        - script.execute:         
            id: UART_CMD
            command_in: !lambda |-
              id(debug).publish_state("Heat On");
              id(uart_send) = 9;
              std::string str;
              if (id(firmware) == "9200") { str="F005"; }
              else if (id(firmware) == "E670") { str="F006"; }
              else { str="F001"; }
              return str;
        - script.wait: UART_CMD 
        - wait_until:
            condition:
              lambda: 'return (id(uart_send) == 0);'
            timeout: 100ms
        - if: 
            condition:
              lambda: 'return (id(debug).state != "OK");'
            then:
              - lambda: id(debug).publish_state("Stove failed Heat On");
        - lambda: id(uart_send) = 1;  
    off_mode:
      then:
        - wait_until:
            condition:
              lambda: 'return (id(uart_send) == 0);'
            timeout: 1s
        - lambda: |- 
            id(debug).publish_state("Heat OFF");
            id(uart_send) = 9;
        - uart.write: "\x1bRF000058&"
        - wait_until:
            condition:
              lambda: 'return (id(uart_send) == 0);'
            timeout: 100ms
        - if: 
            condition:
              lambda: 'return (id(debug).state != "OK");'
            then:
              - lambda: id(debug).publish_state("Stove failed Heat Off");
        - lambda: id(uart_send) = 1;  
    visual:
      min_temperature: 10
      max_temperature: 35
      temperature_step:
        target_temperature: 1.0
        current_temperature: 0.1
        
# constants nog ongebruikt
#SET_AUGERCOR = "\x1bRD50005A&"
#SET_EXTRACTORCOR = "\x1bRD50005B&"
#SET_PELLETCOR = "\x1bRD50005B&"

# Define UART pinout RX: GPIO-3 (D9) & TX: GPIO-1 (D10)
uart:
  id: uart_bus
  tx_pin: 1
  rx_pin: 3
  baud_rate: 115200  
  debug:
    direction: RX
    dummy_receiver: true
    after:
      timeout: 50ms
      delimiter: "&" 
    sequence:
      - lambda: |-
            UARTDebug::log_string(direction, bytes);
            //Convert uart text to string
            std::string data_from_server(bytes.begin(), bytes.end());
            std::string status;
            unsigned int checksum = 0;
            if (data_from_server.length() == 10) {
              
              status=data_from_server.substr(1, 6);
              for (size_t i = 0; i < status.size(); i++) {
                checksum += static_cast<unsigned char>(status[i]);
              }
              checksum = checksum & 0xFF;
            } 
            if (data_from_server.substr(7, 2) == str_sprintf("%X", checksum)) {
              switch(id(uart_send)) {
                case 1: {
                  const int STATE_OFF             = 0x0000;
                  const int STATE_IGNITION        = 0x0101;
                  const int STATE_LOAD_WOOD       = 0x0102;
                  const int STATE_FIRE_ON         = 0x0103;
                  const int STATE_FIRE_ON_VENT_ON = 0x0104;
                  const int STATE_ON_CLEAN        = 0x0200;
                  const int STATE_ON              = 0x0201;
                  const int STATE_STOP_SEQUENCE   = 0x0301;
                  const int STATE_FIRE_CLEAN      = 0x0401;
                  const int STATE_COOLDOWN1       = 0x0801;
                  const int STATE_COOLDOWN2       = 0x0802;
                  const int STATE_ECO             = 0x1000;
                  const int STATE_ECO_COOL1       = 0x1001; 
                  const int STATE_ECO_COOL2       = 0x1002;
                  const int STATE_ECO_OFF         = 0x1003;
                  int currentstate = std::stoi(data_from_server.substr(1, 4), nullptr, 16);
                  int kachel_aan = 1;
                  if (STATE_IGNITION == currentstate) { status = "Ignition starting";} 
                  else if (STATE_LOAD_WOOD == currentstate) { status = "Ignition starting, load wood"; } 
                  else if (STATE_FIRE_ON == currentstate) { status = "Ignition starting, fire on"; } 
                  else if (STATE_FIRE_ON_VENT_ON == currentstate) { status = "Ignition starting, fire on and vent"; } 
                  else if (STATE_ON == currentstate) { status = "Stove On"; } 
                  else if (STATE_ON_CLEAN == currentstate) { status = "Stove On, Clean"; } 
                  else if (STATE_FIRE_CLEAN == currentstate) { status = "Cleaning"; } 
                  else if (STATE_ECO == currentstate) { status = "Eco Idle"; } 
                  else if (STATE_ECO_COOL1 == currentstate) { status = "Eco Idle, Cooldown sequence 1"; } 
                  else if (STATE_ECO_COOL2 == currentstate) { status = "Eco Idle, Cooldown sequence 2"; } 
                  else if (STATE_ECO_OFF == currentstate) { status = "Eco Idle, OFF"; }  
                  else if (STATE_STOP_SEQUENCE == currentstate) {
                    status = "Stove power off";
                    kachel_aan = 0;
                  } else if (STATE_COOLDOWN1 == currentstate) {
                    status = "Cooldown sequence 1";
                    kachel_aan = 0;
                  } else if (STATE_COOLDOWN2 == currentstate) {
                    status = "Cooldown sequence 2";
                    kachel_aan = 0;
                  } else if (STATE_OFF == currentstate) {
                    status = "Off";
                    kachel_aan = 0;
                  } else {
                    status = "Unknown state "+ std::to_string(currentstate);
                  }
                  id(burner_status).publish_state(status);
                  if (kachel_aan == 0 && id(Stove).mode == CLIMATE_MODE_HEAT) {
                    id(Stove).make_call().set_mode("OFF").perform();
                    id(debug).publish_state("Off, stove<>climate");
                  } else if (kachel_aan == 1 && id(Stove).mode == CLIMATE_MODE_OFF) {
                    id(Stove).make_call().set_mode("HEAT").perform();
                    id(debug).publish_state("HEAT, stove<>climate");
                  }
                  id(uart_send) = 2;
                  break;
                }
                case 2: {
                  id(room_temp_stove).publish_state(std::stoi(data_from_server.substr(1, 4), nullptr, 16)/10.0);
                  id(uart_send) = 1;
                  break;
                }
                case 3: {
                  id(power_level).publish_state(std::stoi(data_from_server.substr(1, 4), nullptr, 16));
                  id(uart_send) = 1;
                  break;
                }
                case 4: {
                  id(pellet_speed).publish_state(std::stoi(data_from_server.substr(1, 4), nullptr, 16));
                  id(fan_mode) = std::stoi(data_from_server.substr(1, 4), nullptr, 16);
                  if (id(fan_mode) == 1) { id(Stove).make_call().set_fan_mode(ClimateFanMode::CLIMATE_FAN_QUIET).perform(); }
                  else if (id(fan_mode) == 2) { id(Stove).make_call().set_fan_mode(ClimateFanMode::CLIMATE_FAN_LOW).perform(); }
                  else if (id(fan_mode) == 3) { id(Stove).make_call().set_fan_mode(ClimateFanMode::CLIMATE_FAN_MIDDLE).perform(); }
                  else if (id(fan_mode) == 4) { id(Stove).make_call().set_fan_mode(ClimateFanMode::CLIMATE_FAN_MEDIUM).perform(); }
                  else if (id(fan_mode) == 5) { id(Stove).make_call().set_fan_mode(ClimateFanMode::CLIMATE_FAN_HIGH).perform(); }
                  id(uart_send) = 1;
                  break;
                }
                case 5: {
                  id(flu_gas_temp).publish_state(std::stoi(data_from_server.substr(1, 4), nullptr, 16));
                  id(uart_send) = 1;
                  break;
                }
                case 6: {
                  id(exh_fan_speed).publish_state(std::stoi(data_from_server.substr(1, 4), nullptr, 16)*10);
                  id(uart_send) = 1;
                  break;
                }
                case 7: {
                  int err_code = std::stoi(data_from_server.substr(1, 4), nullptr, 16);
                  id(error_code).publish_state(err_code);
                  switch(err_code) {
                    case 0: { break; }
                    case 1: {
                      id(burner_status).publish_state("Ignition failure");
                      break;
                      }
                    case 2: {
                      id(burner_status).publish_state("Defective suction");
                      break;
                      }
                    case 3: {
                      id(burner_status).publish_state("Insufficient air intake");
                      break;
                      }
                    case 4: {
                      id(burner_status).publish_state("Water temperature");
                      break;
                      }
                    case 5: {
                      id(burner_status).publish_state("Out of pellets");
                      break;
                      }
                    case 6: {
                      id(burner_status).publish_state("Defective pressure switch");
                      break;
                      }
                    case 7: {
                      id(burner_status).publish_state("Unknown");
                      break;
                      }
                    case 8: {
                      id(burner_status).publish_state("No current");
                      break;
                      }
                    case 9: {
                      id(burner_status).publish_state("Exhaust motor failure");
                      break;
                      }
                    case 10: {
                      id(burner_status).publish_state("Card surge");
                      break;
                      }
                    case 11: {
                      id(burner_status).publish_state("Date expired");
                      break;
                      }
                    case 12: {
                      id(burner_status).publish_state("Unknown");
                      break;
                      }
                    case 13: {
                      id(burner_status).publish_state("Suction regulating sensor error");
                      break;
                      }
                    case 14: {
                      id(burner_status).publish_state("Overheating");
                      break;
                      }
                    default: id(burner_status).publish_state("Unknown Error " + std::to_string(err_code));
                  }
                  id(uart_send) = 1;
                  break;
                }
                case 8: {
                  int temp = std::stoi(data_from_server.substr(1, 4), nullptr, 16);
                  if (temp>9 && temp <36) { id(Stove).target_temperature = temp; } 
                  else { id(debug).publish_state("Error temperature out of range (10-35C) :"+temp); }
                  id(uart_send) = 0;                  
                  break;
                }
                case 9: {
                  int current_state = std::stoi(data_from_server.substr(1, 4), nullptr, 16);
                  if (current_state == 0) { status = "OK"; }
                  else { status = "Unknown return value "+ data_from_server; }
                  id(debug).publish_state(status);
                  id(uart_send) = 0;
                  break;
                }
                case 10: {
                  id(debug).publish_state("Response :"+data_from_server);
                  id(uart_send) = 0;
                  break;
                }
                case 11: {
                  id(PCB_temp).publish_state(std::stoi(data_from_server.substr(1, 4), nullptr, 16));
                  id(uart_send) = 0;                  
                  break;
                }
                case 12: {
                  id(firmware)=data_from_server.substr(1, 4);
                  id(debug).publish_state("Firmware version:"+id(firmware));
                  id(uart_send) = 0;                  
                  break;
                }  
                default: id(debug).publish_state("Unknown UART command");
              } 
            } else { id(debug).publish_state("Error checksum failed :"+data_from_server); }
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      # Every minute
      - seconds: /10
        then:
          - wait_until:
              condition:
                lambda: 'return (id(uart_send) == 0);'
              timeout: 1s
          - lambda: id(uart_send) = 1;
          - uart.write: "\x1bRD90005f&" #Cyclus fase
          - wait_until:
              condition:
                lambda: 'return (id(uart_send) == 2);'
              timeout: 100ms
          - lambda: id(uart_send) = 2;
          - uart.write: "\x1bRD100057&" #GET ambient TEMPERATURE
          - wait_until:
              condition:
                lambda: 'return (id(uart_send) == 1);'
              timeout: 100ms
          - if:
              condition:
                lambda: 'return (id(burner_status).state != "Off");'
              then:
                - lambda: id(uart_send) = 3;
                - uart.write: "\x1bRD300059&" #get level ruimteventilator
                - wait_until:
                    condition:
                      lambda: 'return (id(uart_send) == 1);'
                    timeout: 100ms
                - if: 
                    condition:
                      lambda: 'return (id(pellet_speed).state != id(fan_mode) && id(burner_status).state != "Off" && id(burner_status).state != "Cooling down");' 
                    then:
                      - script.execute:         
                          id: UART_CMD
                          command_in: !lambda |-
                            id(uart_send) = 9;
                            id(pellet_speed).publish_state(id(fan_mode)); 
                            std::string str;
                            int speed;
                            speed=id(fan_mode);
                            str="F00" + std::to_string(speed);
                            return str;
                      - script.wait: UART_CMD 
                      - wait_until:
                          condition:
                            lambda: 'return (id(uart_send) == 0);'
                          timeout: 100ms
                      - if: 
                          condition:
                            lambda: 'return (id(debug).state != "OK");'
                          then:
                            - lambda: id(debug).publish_state("Pelletspeed change failed");  
                    else: 
                      - lambda: id(uart_send) = 4;
                      - uart.write: "\x1bRD40005A&" #GET_PELLETSPEED
                - wait_until:
                    condition:
                      lambda: 'return (id(uart_send) == 1);'
                    timeout: 100ms
          - lambda: id(uart_send) = 5;
          - uart.write: "\x1bRD000056&" #GET_FLUGASTEMP
          - wait_until:
              condition:
                lambda: 'return (id(uart_send) == 1);'
              timeout: 100ms
          - lambda: id(uart_send) = 6;
          - uart.write: "\x1bREF0006D&" #GET_EXHFANSPEED
          - wait_until:
              condition:
                lambda: 'return (id(uart_send) == 1);'
              timeout: 100ms
          - lambda: id(uart_send) = 7;
          - uart.write: "\x1bRDA00067&" #GET_ERRORSTATE
          - wait_until:
              condition:
                lambda: 'return (id(uart_send) == 1);'
              timeout: 100ms
          - lambda: id(uart_send) = 8;
          - uart.write: "\x1bRC60005B&" #GET_SETPOINT 
          - wait_until:
              condition:
                lambda: 'return (id(uart_send) == 0);'
              timeout: 100ms
          - lambda: id(uart_send) = 11;
          - uart.write: "\x1bRDF0006C&" #GET_PCB_TEMP 
          - wait_until:
              condition:
                lambda: 'return (id(uart_send) == 0);'
              timeout: 100ms
          - if:
              condition:
                lambda: 'return (id(firmware) == "0000");'
              then:
                - lambda: id(uart_send) = 12;
                - uart.write: "\x1bRDC00069&" #GET_FIRMWARE 
                - wait_until:
                    condition:
                      lambda: 'return (id(uart_send) == 0);'
                    timeout: 100ms 

text_sensor:
  - platform: template
    name: "burner status"
    id: "burner_status"
    update_interval: 10s 
  - platform: template
    name: "debug"
    id: "debug" 
    update_interval: 10s
